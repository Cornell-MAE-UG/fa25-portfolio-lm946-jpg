import numpy as np
import matplotlib.pyplot as plt

# --- Constants ---
F_max = 35_810      # N
beta = np.pi / 2    # 90 degrees
sin_beta = np.sin(beta)
L = 1.4             # m (fixed rod length)
d = 0.80            # m (actuator pin distance)
max_height = 0.5    # m workspace constraint

# Search theta range (small tilt to near vertical)
theta_values = np.linspace(5*np.pi/180, 85*np.pi/180, 300)
#
weights = []
heights = []

for theta in theta_values:
    W_max = (F_max * d * sin_beta) / (L * np.sin(theta))
    h = L * np.sin(theta)

    # enforce workspace height
    if h > max_height:
        continue

    weights.append(W_max)
    heights.append(h)

# Find the best "compromise" (maximizing product W*h)
scores = np.array(weights) * np.array(heights)
best_idx = np.argmax(scores)

print("\n--- Optimal Configuration ---")
print(f"Theta (deg): {np.degrees(theta_values[best_idx]):.2f}")
print(f"Max Weight (N): {weights[best_idx]:.2f}")
print(f"Lifted Height (m): {heights[best_idx]:.3f}")
print(f"Score (W*h): {scores[best_idx]:.2f}")

# --- Plot tradeoff ---
plt.figure(figsize=(7,5))
plt.plot(heights, weights, 'b-', label="Tradeoff curve")
plt.plot(heights[best_idx], weights[best_idx], 'ro', label="Optimal point")
plt.xlabel("Lifted Height (m)")
plt.ylabel("Max Weight (N)")
plt.title("Weight vs Height Tradeoff (L = 1.4 m)")
plt.legend()
plt.grid(True)
plt.show()
